Lexical Analyzer:
1. skip white spaces
2. handle numbers
3. handle reserved words and identifiers
4. return token


Syntax Analyzer:

program -> block
block -> { decls stmts }
decls -> decls decl | empty
decl -> type id ;
type -> type [ num ] | basic
stmts -> stmts stmt | empty

stmt -> id = expr ;
    | if ( expr ) stmt
    | if ( expr ) stmt else stmt
    | for ( optexpr ; optexpr ; optexpr) stmt
    | while ( expr ) stmt
    | do stmt while ( expr) ;
    | { stmts }
expr -> expr + term | expr - term | term
term -> term * factor | term / factor | factor
factor -> ( expr ) | id

optexpr -> expr | empty



References:
Fig 2.8 (page 76)
Fig 2.17 (page 87)
Fig 2.38 (page 115)
